/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CarDetailHistory;
import model.CarInfo;

/**
 *
 * @author fianrodrigues
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    CarDetailHistory history;
    
    public ViewJPanel(CarDetailHistory history) 
    {
        initComponents();
        this.history = history;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbserialNumber = new javax.swing.JLabel();
        lbmodelNumber = new javax.swing.JLabel();
        lbcity = new javax.swing.JLabel();
        txtViewMake = new javax.swing.JTextField();
        txtViewManufactureDate = new javax.swing.JTextField();
        txtViewOccupancy = new javax.swing.JTextField();
        txtViewSerialNumber = new javax.swing.JTextField();
        txtViewModelNumber = new javax.swing.JTextField();
        txtViewCIty = new javax.swing.JTextField();
        lbmanufactureYear = new javax.swing.JLabel();
        txtViewManufactureYear = new javax.swing.JTextField();
        lbmake = new javax.swing.JLabel();
        lbmanufactureDate = new javax.swing.JLabel();
        lboccupancy = new javax.swing.JLabel();
        lbcertificate = new javax.swing.JLabel();
        txtViewCertificate = new javax.swing.JTextField();
        btnMake = new javax.swing.JButton();
        btnManDate = new javax.swing.JButton();
        btnSeats = new javax.swing.JButton();
        btnSerialNumber = new javax.swing.JButton();
        btnModelNumber = new javax.swing.JButton();
        btnCity = new javax.swing.JButton();
        btnManYear = new javax.swing.JButton();
        btnCert = new javax.swing.JButton();
        txtSearchMake = new javax.swing.JTextField();
        txtSearchManDate = new javax.swing.JTextField();
        txtSearchSeats = new javax.swing.JTextField();
        txtSearchSerialNumber = new javax.swing.JTextField();
        txtSearchModelNumber = new javax.swing.JTextField();
        txtSearchManYear = new javax.swing.JTextField();
        txtSearchCertificate = new javax.swing.JTextField();
        txtSearchCity = new javax.swing.JTextField();
        lbAvailability = new javax.swing.JLabel();
        txtViewAvailability = new javax.swing.JTextField();
        btnAvailability = new javax.swing.JButton();
        txtSearchAvailability = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lbErr = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        chkYes = new javax.swing.JCheckBox();
        chkNo = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(993, 699));

        lbTitle.setText("VIEW CAR INFO");

        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Make", "Man. Date", "Seats", "Serial Number", "Model Number", "City", "Man. Year", "Certificate", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDetails);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbserialNumber.setText("Serial Number:");

        lbmodelNumber.setText("Model Number:");

        lbcity.setText("City:");

        txtViewManufactureDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewManufactureDateActionPerformed(evt);
            }
        });

        txtViewOccupancy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewOccupancyActionPerformed(evt);
            }
        });

        txtViewSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewSerialNumberActionPerformed(evt);
            }
        });

        txtViewModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewModelNumberActionPerformed(evt);
            }
        });

        txtViewCIty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewCItyActionPerformed(evt);
            }
        });

        lbmanufactureYear.setText("Manufacture Year:");

        txtViewManufactureYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewManufactureYearActionPerformed(evt);
            }
        });

        lbmake.setText("Make:");

        lbmanufactureDate.setText("Manufacture Date:");

        lboccupancy.setText("Occupancy:");

        lbcertificate.setText("Certificate:");

        txtViewCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewCertificateActionPerformed(evt);
            }
        });

        btnMake.setText("Make");
        btnMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeActionPerformed(evt);
            }
        });

        btnManDate.setText("Man. Date");
        btnManDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManDateActionPerformed(evt);
            }
        });

        btnSeats.setText("Seats");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        btnSerialNumber.setText("Sr. Number");
        btnSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNumberActionPerformed(evt);
            }
        });

        btnModelNumber.setText("Model Number");
        btnModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelNumberActionPerformed(evt);
            }
        });

        btnCity.setText("City");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnManYear.setText("Man. Year");
        btnManYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManYearActionPerformed(evt);
            }
        });

        btnCert.setText("Certificate");
        btnCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCertActionPerformed(evt);
            }
        });

        txtSearchMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchMakeActionPerformed(evt);
            }
        });
        txtSearchMake.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchMakeKeyTyped(evt);
            }
        });

        txtSearchManDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchManDateActionPerformed(evt);
            }
        });
        txtSearchManDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchManDateKeyTyped(evt);
            }
        });

        txtSearchSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSeatsActionPerformed(evt);
            }
        });
        txtSearchSeats.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchSeatsKeyTyped(evt);
            }
        });

        txtSearchSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSerialNumberActionPerformed(evt);
            }
        });
        txtSearchSerialNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchSerialNumberKeyTyped(evt);
            }
        });

        txtSearchModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchModelNumberActionPerformed(evt);
            }
        });
        txtSearchModelNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchModelNumberKeyTyped(evt);
            }
        });

        txtSearchManYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchManYearActionPerformed(evt);
            }
        });
        txtSearchManYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchManYearKeyTyped(evt);
            }
        });

        txtSearchCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCertificateActionPerformed(evt);
            }
        });
        txtSearchCertificate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchCertificateKeyTyped(evt);
            }
        });

        txtSearchCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCityActionPerformed(evt);
            }
        });
        txtSearchCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchCityKeyTyped(evt);
            }
        });

        lbAvailability.setText("Availability:");

        txtViewAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtViewAvailabilityActionPerformed(evt);
            }
        });

        btnAvailability.setText("Availability");
        btnAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailabilityActionPerformed(evt);
            }
        });

        txtSearchAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchAvailabilityActionPerformed(evt);
            }
        });
        txtSearchAvailability.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchAvailabilityKeyTyped(evt);
            }
        });

        jLabel1.setText("Search Car");

        lbErr.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        lbErr.setForeground(new java.awt.Color(255, 51, 0));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        chkYes.setText("Yes");
        chkYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkYesActionPerformed(evt);
            }
        });

        chkNo.setText("No");
        chkNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(216, 216, 216))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbmanufactureYear)
                            .addComponent(lbcity)
                            .addComponent(lbmodelNumber)
                            .addComponent(lbserialNumber)
                            .addComponent(lboccupancy)
                            .addComponent(lbmanufactureDate)
                            .addComponent(lbmake)
                            .addComponent(lbcertificate)
                            .addComponent(lbAvailability))
                        .addGap(70, 70, 70))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkYes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkNo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtViewMake)
                                        .addComponent(txtViewManufactureDate)
                                        .addComponent(txtViewOccupancy)
                                        .addComponent(txtViewSerialNumber)
                                        .addComponent(txtViewModelNumber)
                                        .addComponent(txtViewCIty)
                                        .addComponent(txtViewManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtViewCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtViewAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnMake)
                                    .addComponent(btnManDate)
                                    .addComponent(btnSeats)
                                    .addComponent(btnSerialNumber)
                                    .addComponent(btnModelNumber)
                                    .addComponent(btnManYear)
                                    .addComponent(btnCert)
                                    .addComponent(btnCity)
                                    .addComponent(btnAvailability))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearchManYear, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchManDate, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchMake, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSearchAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtSearchSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lbErr, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnDelete)
                                .addGap(371, 371, 371)
                                .addComponent(jLabel1)))
                        .addGap(69, 69, 69))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMake)
                            .addComponent(txtSearchMake, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchManDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnManDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchSeats, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSeats))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(btnCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnManYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAvailability))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSearchSerialNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSerialNumber))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnModelNumber)
                                    .addComponent(txtSearchModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchManYear, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearchAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnDelete)
                                .addComponent(btnView)
                                .addComponent(btnUpdate))
                            .addComponent(jLabel1))
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbmake)
                            .addComponent(txtViewMake, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbmanufactureDate)
                            .addComponent(txtViewManufactureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(lbErr, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lboccupancy)
                                    .addComponent(txtViewOccupancy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbserialNumber)
                                    .addComponent(txtViewSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbmodelNumber)
                            .addComponent(txtViewModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbcity)
                            .addComponent(txtViewCIty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbmanufactureYear)
                            .addComponent(txtViewManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbcertificate)
                            .addComponent(txtViewCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtViewAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbAvailability))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkYes)
                    .addComponent(chkNo))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = tblDetails.getSelectedRow();
       
       if (selectedRowIndex < 0)
       {
          JOptionPane.showMessageDialog(this, "Please select an entry to view ");
          return;
       }
       
        DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
        CarInfo selectedCar = (CarInfo) model.getValueAt(selectedRowIndex, 0);
        
         txtViewMake.setText(selectedCar.getMake());
        txtViewManufactureDate.setText(selectedCar.getManufactureDate());
        txtViewOccupancy.setText(String.valueOf(selectedCar.getSeats()));
        txtViewSerialNumber.setText(String.valueOf(selectedCar.getSerialNumber()));
        txtViewModelNumber.setText(selectedCar.getModelNumber());
         txtViewCIty.setText(selectedCar.getCity());
         txtViewManufactureYear.setText(selectedCar.getManufactureYear());
         txtViewCertificate.setText(selectedCar.getCertificate());
         txtViewAvailability.setText(selectedCar.getAvailability());
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtViewManufactureDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewManufactureDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewManufactureDateActionPerformed

    private void txtViewOccupancyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewOccupancyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewOccupancyActionPerformed

    private void txtViewSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewSerialNumberActionPerformed

    private void txtViewModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewModelNumberActionPerformed

    private void txtViewCItyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewCItyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewCItyActionPerformed

    private void txtViewManufactureYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewManufactureYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewManufactureYearActionPerformed

    private void txtViewCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewCertificateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewCertificateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       
       int selectedRowIndex = tblDetails.getSelectedRow();
       
       if (selectedRowIndex < 0)
       {
          JOptionPane.showMessageDialog(this, "Please select an entry to delete");
          return;
       }
       
        DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
        CarInfo selectedCar = (CarInfo) model.getValueAt(selectedRowIndex, 0);
        
        history.deleteCar(selectedCar);
        JOptionPane.showMessageDialog(this, "Entry has been deleted");
        
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnManDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManDateActionPerformed
        // TODO add your handling code here:
        
        String mandate = txtSearchManDate.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getManufactureDate().contains(mandate))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnManDateActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
        
        int seat = Integer.parseInt(txtSearchSeats.getText());
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getSeats() == seat)
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void btnSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNumberActionPerformed
        // TODO add your handling code here:
        
        int srnum = Integer.parseInt(txtSearchSeats.getText());
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getSerialNumber() == (srnum))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnSerialNumberActionPerformed

    private void btnModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelNumberActionPerformed
        // TODO add your handling code here:
        
        String modnum = txtSearchModelNumber.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getModelNumber().contains(modnum))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnModelNumberActionPerformed

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        // TODO add your handling code here:
        
        String city = txtSearchCity.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getCity().contains(city))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnManYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManYearActionPerformed
        // TODO add your handling code here:
       
        String manyear = txtSearchManYear.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getManufactureYear().contains(manyear))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnManYearActionPerformed

    private void btnCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCertActionPerformed
        // TODO add your handling code here:
        
        String cert = txtSearchCertificate.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getCertificate().contains(cert))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnCertActionPerformed

    private void txtSearchSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSeatsActionPerformed

    private void txtSearchSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSerialNumberActionPerformed

    private void txtSearchModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchModelNumberActionPerformed

    private void txtSearchManYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchManYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchManYearActionPerformed

    private void txtSearchCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCertificateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCertificateActionPerformed

    private void txtSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCityActionPerformed

    private void txtViewAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtViewAvailabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtViewAvailabilityActionPerformed

    private void btnAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailabilityActionPerformed
        // TODO add your handling code here:
        
        String avail = txtSearchAvailability.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getAvailability().contains(avail))
            {
                c.add(ci);
            }
        }
        populateTable(c);
    }//GEN-LAST:event_btnAvailabilityActionPerformed

    private void txtSearchAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchAvailabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchAvailabilityActionPerformed

    private void btnMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeActionPerformed
        // TODO add your handling code here:
        
        String make = txtSearchMake.getText();
         ArrayList<CarInfo> c = new ArrayList<CarInfo>();
        for(CarInfo ci : history.getHistory())
        {
            if (ci.getMake().contains(make))
            {
                c.add(ci);
            }
        }
        populateTable(c);
        
    }//GEN-LAST:event_btnMakeActionPerformed

    private void txtSearchMakeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMakeKeyTyped
        // TODO add your handling code here:
        
       String sm = txtSearchMake.getText();
        String patter = "^[A-Za-z]{0,9}+";
        Pattern exp = Pattern.compile(patter);
        Matcher match = exp.matcher(sm);
        if(!match.matches()){
            lbErr.setText(" Input Invalid!! ");
        }else{
            lbErr.setText(" ");
        }
        
    }//GEN-LAST:event_txtSearchMakeKeyTyped

    private void txtSearchManDateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchManDateKeyTyped
        // TODO add your handling code here:
        
        String mandate = "^[0-9]{0,2}-[0-9]{0,2}-[0-9]{0,4}+";
        Pattern dob = Pattern.compile(mandate);
        Matcher matcher = dob.matcher(txtSearchManDate.getText());
        if(!matcher.matches())
        {
        lbErr.setText("Input invalid!!");
        }
        else
        {
            lbErr.setText(" ");
        }
    }//GEN-LAST:event_txtSearchManDateKeyTyped

    private void txtSearchSeatsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSeatsKeyTyped
        // TODO add your handling code here:
          String mandate;
        mandate = "^[0-9]{0,1}+";
        Pattern dob = Pattern.compile(mandate);
        Matcher matcher = dob.matcher(txtSearchSeats.getText());
        if(!matcher.matches())
        {
        lbErr.setText("Input invalid!!");
        }
        else
        {
            lbErr.setText(" ");
        }
    }//GEN-LAST:event_txtSearchSeatsKeyTyped

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
           String make = txtViewMake.getText();
        String date = txtViewManufactureDate.getText();
        int seats = Integer.parseInt(txtViewOccupancy.getText());
        long serialNumber = Long.parseLong(txtViewSerialNumber.getText());
        String modnum = txtViewModelNumber.getText();
        String city = txtViewCIty.getText();
        String year = txtViewManufactureYear.getText();
        String cert = txtViewCertificate.getText();
        String avail = txtViewAvailability.getText();
        
        CarInfo ci = history.addNewInfo();
        
        ci.setMake(make);
        ci.setManufactureDate(date);
        ci.setSeats(seats);
        ci.setSerialNumber(serialNumber);
        ci.setModelNumber(modnum);
        ci.setCity(city);
        ci.setManufactureYear(year);
        ci.setCertificate(cert);
        ci.setAvailability(avail);
        
        JOptionPane.showMessageDialog(this, "Car Information Has Been Updated");
        
        txtViewMake.setText("");
        txtViewManufactureDate.setText("");
        txtViewOccupancy.setText("");
        txtViewSerialNumber.setText("");
        txtViewModelNumber.setText("");
        txtViewCIty.setText("");
        txtViewManufactureYear.setText("");
        txtViewCertificate.setText("");
        txtViewAvailability.setText("");
        
        populateTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtSearchMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchMakeActionPerformed
      
    }//GEN-LAST:event_txtSearchMakeActionPerformed

    private void txtSearchCityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchCityKeyTyped
        // TODO add your handling code here:
        
         String city;
        city = "^[A-Za-z]+";
        Pattern dob = Pattern.compile(city);
        Matcher matcher = dob.matcher(txtSearchCity.getText());
        if(!matcher.matches())
        {
        lbErr.setText("Input invalid!!");
        }
        else
        {
            lbErr.setText(" ");
        }
    }//GEN-LAST:event_txtSearchCityKeyTyped

    private void txtSearchManDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchManDateActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSearchManDateActionPerformed

    private void txtSearchSerialNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSerialNumberKeyTyped
        // TODO add your handling code here:
        
        String devIdentifier = txtSearchSerialNumber.getText();
        int length = devIdentifier.length();
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9')
        {
            if(length<15)
            {
                txtSearchSerialNumber.setEditable(true);
                lbErr.setText(" Input should be 15 digits ");
            }
            else
            {
                txtSearchSerialNumber.setEditable(false);
                lbErr.setText(" ");
            }
        }
        else
        {
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE)
            {
                txtSearchSerialNumber.setEditable(true);
               
            }
            else
            {
                txtSearchSerialNumber.setEditable(false);
                
            }
        }
    }//GEN-LAST:event_txtSearchSerialNumberKeyTyped

    private void txtSearchModelNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchModelNumberKeyTyped
        // TODO add your handling code here:
        
        String devIdentifier = txtSearchModelNumber.getText();
        int length = devIdentifier.length();
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9')
        {
            if(length<15)
            {
                txtSearchModelNumber.setEditable(true);
                lbErr.setText(" Input should be 15 digits!! ");
            }
            else
            {
                txtSearchModelNumber.setEditable(false);
                lbErr.setText(" ");
            }
        }
        else
        {
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE)
            {
                txtSearchModelNumber.setEditable(true);
               
            }
            else
            {
                txtSearchModelNumber.setEditable(false);
                
            }
        }
        
    }//GEN-LAST:event_txtSearchModelNumberKeyTyped

    private void txtSearchManYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchManYearKeyTyped
        // TODO add your handling code here:
        
        String devIdentifier = txtSearchManYear.getText();
        int length = devIdentifier.length();
        char c = evt.getKeyChar();
        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9')
        {
            if(length<4)
            {
                txtSearchManYear.setEditable(true);
                lbErr.setText("Input Invalid!!");
            }
            else
            {
                txtSearchManYear.setEditable(false);
                lbErr.setText(" ");
            }
        }
        else
        {
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE)
            {
                txtSearchManYear.setEditable(true);
               
            }
            else
            {
                txtSearchManYear.setEditable(false);
                
            }
        }
    }//GEN-LAST:event_txtSearchManYearKeyTyped

    private void txtSearchCertificateKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchCertificateKeyTyped
        // TODO add your handling code here:
        String cert;
        cert = "^[A-Za-z]+";
        Pattern dob = Pattern.compile(cert);
        Matcher matcher = dob.matcher(txtSearchCertificate.getText());
        if(!matcher.matches())
        {
        lbErr.setText("Input invalid!!");
        }
        else
        {
            lbErr.setText(" ");
        }
    }//GEN-LAST:event_txtSearchCertificateKeyTyped

    private void txtSearchAvailabilityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchAvailabilityKeyTyped
        // TODO add your handling code here:
        String avail;
        avail = "^[A-Za-z]+";
        Pattern dob = Pattern.compile(avail);
        Matcher matcher = dob.matcher(txtSearchAvailability.getText());
        if(!matcher.matches())
        {
        lbErr.setText("Input invalid!!");
        }
        else
        {
            lbErr.setText(" ");
        }
    }//GEN-LAST:event_txtSearchAvailabilityKeyTyped

    private void chkYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkYesActionPerformed
        // TODO add your handling code here:
        
        if (chkYes.isSelected())
        {
            String avail = txtViewAvailability.getText();
            CarInfo ci = history.addNewInfo();
            txtViewAvailability.setText("Available");
            populateTable();
        }
        else 
        {
            if (chkNo.isSelected())
        {
            String avail = txtViewAvailability.getText();
            CarInfo ci = history.addNewInfo();
            txtViewAvailability.setText("Unavailable");
            populateTable();
        }
            else
            {
                JOptionPane.showMessageDialog(this, "Select if the car is unavailable or not.");
            }
        }    
    }//GEN-LAST:event_chkYesActionPerformed

    private void chkNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNoActionPerformed
        // TODO add your handling code here:
        
        if (chkYes.isSelected())
        {
            String avail = txtViewAvailability.getText();
            CarInfo ci = history.addNewInfo();
            txtViewAvailability.setText("Available");
            populateTable();
        }
        else 
        {
            if (chkNo.isSelected())
        {
            String avail = txtViewAvailability.getText();
            CarInfo ci = history.addNewInfo();
            txtViewAvailability.setText("Unavailable");
            populateTable();
        }
            else
            {
                JOptionPane.showMessageDialog(this, "Select if the car is unavailable or not.");
            }
        }    
    }//GEN-LAST:event_chkNoActionPerformed

   
  
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvailability;
    private javax.swing.JButton btnCert;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMake;
    private javax.swing.JButton btnManDate;
    private javax.swing.JButton btnManYear;
    private javax.swing.JButton btnModelNumber;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnSerialNumber;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JCheckBox chkNo;
    private javax.swing.JCheckBox chkYes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAvailability;
    private javax.swing.JLabel lbErr;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbcertificate;
    private javax.swing.JLabel lbcity;
    private javax.swing.JLabel lbmake;
    private javax.swing.JLabel lbmanufactureDate;
    private javax.swing.JLabel lbmanufactureYear;
    private javax.swing.JLabel lbmodelNumber;
    private javax.swing.JLabel lboccupancy;
    private javax.swing.JLabel lbserialNumber;
    private javax.swing.JTable tblDetails;
    private javax.swing.JTextField txtSearchAvailability;
    private javax.swing.JTextField txtSearchCertificate;
    private javax.swing.JTextField txtSearchCity;
    private javax.swing.JTextField txtSearchMake;
    private javax.swing.JTextField txtSearchManDate;
    private javax.swing.JTextField txtSearchManYear;
    private javax.swing.JTextField txtSearchModelNumber;
    private javax.swing.JTextField txtSearchSeats;
    private javax.swing.JTextField txtSearchSerialNumber;
    private javax.swing.JTextField txtViewAvailability;
    private javax.swing.JTextField txtViewCIty;
    private javax.swing.JTextField txtViewCertificate;
    private javax.swing.JTextField txtViewMake;
    private javax.swing.JTextField txtViewManufactureDate;
    private javax.swing.JTextField txtViewManufactureYear;
    private javax.swing.JTextField txtViewModelNumber;
    private javax.swing.JTextField txtViewOccupancy;
    private javax.swing.JTextField txtViewSerialNumber;
    // End of variables declaration//GEN-END:variables

    private void populateTable() 
    {
        DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
        model.setRowCount(0);
       
       for(CarInfo ci : history.getHistory())
       {
           Object[] row = new Object[9];
           row[0] = ci;
           row[1] = ci.getManufactureDate();
           row[2] = ci.getSeats();
           row[3] = ci.getSerialNumber();
           row[4] = ci.getModelNumber();
           row[5] = ci.getCity();
           row[6] = ci.getManufactureYear();
           row[7] = ci.getCertificate();
           row[8] = ci.getAvailability();
           
           model.addRow(row);
       }
    }
    
     private void populateTable(ArrayList<CarInfo> aci) 
    {
        DefaultTableModel model = (DefaultTableModel) tblDetails.getModel();
        model.setRowCount(0);
       
       for(CarInfo ci : aci)
       {
           Object[] row = new Object[9];
           row[0] = ci;
           row[1] = ci.getManufactureDate();
           row[2] = ci.getSeats();
           row[3] = ci.getSerialNumber();
           row[4] = ci.getModelNumber();
           row[5] = ci.getCity();
           row[6] = ci.getManufactureYear();
           row[7] = ci.getCertificate();
           row[8] = ci.getAvailability();
           
           model.addRow(row);
       }
    }
}
